openapi: 3.0.3
info:
  title: PP – BFF API
  version: 0.1.0
  description: Backend-for-Frontend for the PP app. Proxies PP Member API and Taxico API. Computes buffer-inclusive times.
servers:
  - url: https://api.pp.example.com/bff/v1
security:
  - BearerAuth: []

paths:
  /recommendedDepartureTime:
    get:
      summary: Recommended departure time (buffer added)
      description: |
        Compute pickup time to arrive by the target time. Uses PP member data (buffer, terminal),
        and proxies Taxico `/recommendedDepartureTime`. The returned `departureTime` includes the PP buffer.
      parameters:
        - name: memberId
          in: query
          required: true
          schema: { type: string }
        - name: terminalId
          in: query
          required: true
          schema: { type: string }
        - name: arrivalTime
          in: query
          required: true
          schema: { type: string, format: date-time }
        - name: startLat
          in: query
          required: true
          schema: { type: number, minimum: -90, maximum: 90 }
        - name: startLon
          in: query
          required: true
          schema: { type: number, minimum: -180, maximum: 180 }
        - name: destinationLat
          in: query
          required: true
          schema: { type: number, minimum: -90, maximum: 90 }
        - name: destinationLon
          in: query
          required: true
          schema: { type: number, minimum: -180, maximum: 180 }
      responses:
        '200':
          description: Buffer-inclusive departure time
          content:
            application/json:
              schema:
                type: object
                properties:
                  departureTime:
                    type: string
                    format: date-time
                    description: Pickup time with PP buffer already applied.
              examples:
                sample:
                  value:
                    departureTime: "2025-10-02T14:22:00Z"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /timeToDestination:
    get:
      summary: Time-to-destination (buffer added)
      description: |
        Evaluate journey given a departure time. Proxies Taxico `/timeToDestination`,
        and returns a **buffer-inclusive** `departureTime` (same input departureTime if already includes buffer).
      parameters:
        - name: memberId
          in: query
          required: true
          schema: { type: string }
        - name: terminalId
          in: query
          required: true
          schema: { type: string }
        - name: departureTime
          in: query
          required: true
          schema: { type: string, format: date-time }
        - name: startLat
          in: query
          required: true
          schema: { type: number, minimum: -90, maximum: 90 }
        - name: startLon
          in: query
          required: true
          schema: { type: number, minimum: -180, maximum: 180 }
        - name: destinationLat
          in: query
          required: true
          schema: { type: number, minimum: -90, maximum: 90 }
        - name: destinationLon
          in: query
          required: true
          schema: { type: number, minimum: -180, maximum: 180 }
      responses:
        '200':
          description: Returns buffer-inclusive departure time
          content:
            application/json:
              schema:
                type: object
                properties:
                  departureTime:
                    type: string
                    format: date-time
                    description: Departure time including PP buffer.
              examples:
                sample:
                  value:
                    departureTime: "2025-10-02T14:26:00Z"
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /flightBookings:
    get:
      summary: Proxy to PP Member API – flight bookings for member
      description: Proxies `PP Member API /flightBookings/member` with the same query parameters.
      parameters:
        - name: memberId
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Pass-through from Member API
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /rideBookings:
    get:
      summary: Proxy to Taxico – ride bookings
      description: Proxies `Taxico /rideBookings`.
      parameters:
        - name: customerId
          in: query
          required: true
          schema: { type: string }
        - name: dropoffLat
          in: query
          required: true
          schema: { type: number, minimum: -90, maximum: 90 }
        - name: dropoffLon
          in: query
          required: true
          schema: { type: number, minimum: -180, maximum: 180 }
        - name: dropoffTime
          in: query
          required: true
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Pass-through from Taxico
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

  /bookRide:
    post:
      summary: Proxy to Taxico – book ride
      description: Proxies `Taxico /bookRide`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                customerId: { type: string }
                startLocation:
                  type: object
                  properties:
                    lat: { type: number, minimum: -90, maximum: 90 }
                    lon: { type: number, minimum: -180, maximum: 180 }
                  required: [lat, lon]
                startTime: { type: string, format: date-time }
              required: [customerId, startLocation, startTime]
      responses:
        '201':
          description: Pass-through from Taxico
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/ServerError' }

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:   { description: Invalid request parameters. }
    Unauthorized: { description: Missing or invalid credentials. }
    ServerError:  { description: Unexpected server error. }
