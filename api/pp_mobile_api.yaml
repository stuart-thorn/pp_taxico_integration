openapi: 3.0.3
info:
  title: PP Mobile API (BFF)
  version: 0.3.0
  description: >
    Public BFF consumed by the PP App. Composes data from PP Member API and TaxiCo API.
servers:
  - url: https://api.pp.example.com
security:
  - bearerAuth: []
paths:
  /bookingsList:
    get:
      summary: Get list of pending flights with related taxi data
      operationId: getBookingsList
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
      responses:
        "200":
          description: A page of flight bookings with taxi context
          content:
            application/json:
              schema:
                type: object
                required: [items, page, pageSize, total]
                properties:
                  page: { type: integer }
                  pageSize: { type: integer }
                  total: { type: integer }
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/BookingSummary"
              examples:
                sample:
                  value:
                    page: 1
                    pageSize: 20
                    total: 2
                    items:
                      - flight:
                          id: "flt_123"
                          number: "BA145"
                          departureAirport: "LHR"
                          departureTimeScheduled: "2025-10-03T18:40:00Z"
                          departureTimeEstimated: "2025-10-03T19:05:00Z"
                          terminal: "5"
                          gate: null
                          status: "DELAYED"
                        taxi:
                          existingRide:
                            rideId: "ride_789"
                            status: "PENDING"
                            etaDriverArrivalMinutes: 6
                          recommendedDepartureTime: "2025-10-03T17:10:00Z"
                          timeToDestinationMinutes: 42
                      - flight:
                          id: "flt_456"
                          number: "U23651"
                          departureAirport: "LGW"
                          departureTimeScheduled: "2025-10-04T07:20:00Z"
                          departureTimeEstimated: "2025-10-04T07:20:00Z"
                          terminal: "N"
                          gate: null
                          status: "ON_TIME"
                        taxi:
                          existingRide: null
                          recommendedDepartureTime: "2025-10-04T05:45:00Z"
                          timeToDestinationMinutes: 58
        "401": { $ref: "#/components/responses/Unauthorized" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "5XX": { $ref: "#/components/responses/ServerError" }

  /rideDetails:
    get:
      summary: Get ride details and journey timing for a flight
      operationId: getRideDetails
      parameters:
        - in: query
          name: flightId
          required: true
          schema: { type: string }
        - in: query
          name: lat
          description: Member’s current latitude
          required: true
          schema: { type: number, format: double }
        - in: query
          name: lon
          description: Member’s current longitude
          required: true
          schema: { type: number, format: double }
      responses:
        "200":
          description: Ride details, options and timing
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RideDetailsResponse"
              examples:
                sample:
                  value:
                    flightId: "flt_123"
                    pickup:
                      lat: 51.5074
                      lon: -0.1278
                      address: "10 Downing Street, London"
                    dropoff:
                      airportCode: "LHR"
                      terminal: "5"
                    timeToDestinationMinutes: 42
                    recommendedDepartureTime: "2025-10-03T17:10:00Z"
                    existingRide:
                      rideId: "ride_789"
                      status: "PENDING"
                      etaDriverArrivalMinutes: 6
                    options:
                      - serviceLevel: "Standard"
                        estimatedFare:
                          currency: "GBP"
                          amount: 48.50
                        etaDriverArrivalMinutes: 5
                      - serviceLevel: "XL"
                        estimatedFare:
                          currency: "GBP"
                          amount: 72.00
                        etaDriverArrivalMinutes: 7
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "5XX": { $ref: "#/components/responses/ServerError" }

  /bookRide:
    post:
      summary: Submit a taxi booking request linked to a flight
      operationId: bookRide
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BookRideRequest"
            examples:
              sample:
                value:
                  flightId: "flt_123"
                  serviceLevel: "Standard"
                  pickup:
                    lat: 51.5074
                    lon: -0.1278
                    address: "10 Downing Street, London"
                  dropoff:
                    airportCode: "LHR"
                    terminal: "5"
                  pickupTime: "2025-10-03T16:25:00Z"
                  notes: "Meet at rear entrance"
      responses:
        "201":
          description: Ride booking accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookRideResponse"
              examples:
                sample:
                  value:
                    rideId: "ride_901"
                    status: "CONFIRMED"
                    bookingReference: "TX-2F9K3"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "409":
          description: A conflicting ride already exists for this flight
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "5XX": { $ref: "#/components/responses/ServerError" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Missing or invalid credentials
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    BadRequest:
      description: Invalid request parameters or payload
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema: { type: integer, description: Seconds until retry }
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
    ServerError:
      description: Server-side error
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
  schemas:
    BookingSummary:
      type: object
      required: [flight, taxi]
      properties:
        flight: { $ref: "#/components/schemas/Flight" }
        taxi:
          type: object
          required: [recommendedDepartureTime, timeToDestinationMinutes]
          properties:
            existingRide:
              $ref: "#/components/schemas/ExistingRide"
            recommendedDepartureTime:
              type: string
              format: date-time
            timeToDestinationMinutes:
              type: integer
              minimum: 0
    Flight:
      type: object
      required:
        [id, number, departureAirport, departureTimeScheduled, departureTimeEstimated, terminal, status]
      properties:
        id: { type: string }
        number: { type: string }
        departureAirport: { type: string, example: LHR }
        departureTimeScheduled: { type: string, format: date-time }
        departureTimeEstimated: { type: string, format: date-time, nullable: true }
        terminal: { type: string, nullable: true }
        gate: { type: string, nullable: true }
        status: { type: string, enum: [ON_TIME, DELAYED, CANCELLED] }
    RideDetailsResponse:
      type: object
      required:
        [flightId, pickup, dropoff, timeToDestinationMinutes, recommendedDepartureTime, options]
      properties:
        flightId: { type: string }
        pickup: { $ref: "#/components/schemas/GeoAddress" }
        dropoff: { $ref: "#/components/schemas/AirportDropoff" }
        timeToDestinationMinutes: { type: integer, minimum: 0 }
        recommendedDepartureTime: { type: string, format: date-time }
        existingRide: { $ref: "#/components/schemas/ExistingRide" }
        options:
          type: array
          items: { $ref: "#/components/schemas/RideOption" }
    RideOption:
      type: object
      required: [serviceLevel, estimatedFare, etaDriverArrivalMinutes]
      properties:
        serviceLevel: { type: string, example: Standard }
        estimatedFare:
          type: object
          required: [currency, amount]
          properties:
            currency: { type: string, example: GBP }
            amount: { type: number, format: float, minimum: 0 }
        etaDriverArrivalMinutes: { type: integer, minimum: 0 }
    ExistingRide:
      type: object
      required: [rideId, status]
      properties:
        rideId: { type: string }
        status: { type: string, enum: [PENDING, CONFIRMED, DRIVER_EN_ROUTE, CANCELLED, COMPLETED] }
        etaDriverArrivalMinutes: { type: integer, minimum: 0, nullable: true }
    BookRideRequest:
      type: object
      required: [flightId, serviceLevel, pickup, dropoff, pickupTime]
      properties:
        flightId: { type: string }
        serviceLevel: { type: string }
        pickup: { $ref: "#/components/schemas/GeoAddress" }
        dropoff: { $ref: "#/components/schemas/AirportDropoff" }
        pickupTime: { type: string, format: date-time }
        notes: { type: string, maxLength: 500, nullable: true }
    BookRideResponse:
      type: object
      required: [rideId, status, bookingReference]
      properties:
        rideId: { type: string }
        status: { type: string }
        bookingReference: { type: string }
    GeoAddress:
      type: object
      required: [lat, lon]
      properties:
        lat: { type: number, format: double }
        lon: { type: number, format: double }
        address: { type: string, nullable: true }
    AirportDropoff:
      type: object
      required: [airportCode]
      properties:
        airportCode: { type: string, example: LHR }
        terminal: { type: string, nullable: true }
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }
